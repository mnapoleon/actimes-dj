name: Django Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Parallel test execution by category
  test-modules:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-module: [
          'test_models',
          'test_views', 
          'test_forms',
          'test_api',
          'test_admin',
          'test_integration',
          'test_file_management',
          'test_statistics'
        ]
    name: "Test Module: ${{ matrix.test-module }}"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      run: |
        python manage.py migrate

    - name: Run ${{ matrix.test-module }} tests
      run: |
        echo "Running tests for module: ${{ matrix.test-module }}"
        python manage.py test laptimes.tests.${{ matrix.test-module }} --verbosity=2

  # Full test suite with coverage
  test-full:
    runs-on: ubuntu-latest
    name: "Full Test Suite & Coverage"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check Django version
      run: |
        python -c "import django; print(f'Django version: {django.get_version()}')"

    - name: Run Django system checks
      run: |
        python manage.py check

    - name: Run database migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate

    - name: Verify test count and structure
      run: |
        echo "üß™ Verifying modular test structure..."
        python -c "
        import os
        test_files = [f for f in os.listdir('laptimes/tests') if f.startswith('test_') and f.endswith('.py')]
        print(f'‚úÖ Found {len(test_files)} test modules: {test_files}')
        assert len(test_files) == 8, f'Expected 8 test modules, found {len(test_files)}'
        "

    - name: Run all tests
      run: |
        echo "üöÄ Running complete test suite (expecting 70 tests)..."
        python manage.py test laptimes.tests --verbosity=2

    - name: Validate test count
      run: |
        echo "üìä Validating test count..."
        TEST_OUTPUT=$(python manage.py test laptimes.tests --verbosity=0 2>&1)
        TEST_COUNT=$(echo "$TEST_OUTPUT" | grep -o "Ran [0-9]* test" | grep -o "[0-9]*")
        echo "Total tests executed: $TEST_COUNT"
        if [ "$TEST_COUNT" -ne 70 ]; then
          echo "‚ùå Expected exactly 70 tests, but found $TEST_COUNT"
          echo "Test output: $TEST_OUTPUT"
          exit 1
        fi
        echo "‚úÖ Test count validation passed: $TEST_COUNT tests"

    - name: Run tests with coverage
      run: |
        echo "üìà Running coverage analysis..."
        pip install coverage
        coverage run --source='.' manage.py test laptimes.tests
        coverage report --show-missing
        coverage xml

    - name: Generate coverage summary
      run: |
        echo "üìã Coverage Summary by Module:"
        coverage report --include="laptimes/models.py" --show-missing | head -3 | tail -1 | awk '{print "Models: " $4}'
        coverage report --include="laptimes/views.py" --show-missing | head -3 | tail -1 | awk '{print "Views: " $4}'
        coverage report --include="laptimes/forms.py" --show-missing | head -3 | tail -1 | awk '{print "Forms: " $4}'
        coverage report --include="laptimes/admin.py" --show-missing | head -3 | tail -1 | awk '{print "Admin: " $4}'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort flake8-django

    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install security scanning dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check